link <- database[[o]]$phonetics[[1]]$audio
al[[o]] <- link
}
return(al)
}
#Call audio links functions
links_audios <- audio_links(db)
#Audio links functions
audio_links <- function(database){
al <- list()
print(length(database))
for (o in 1:length(database)){
link <- database[[o]]$phonetics[[1]]$audio
patron <- ".*/(.*)\\.mp3$"
names(link)<-sub(patron, "\\1")
al[[o]] <- link
}
return(al)
}
#Call audio links functions
links_audios <- audio_links(db)
names(link)<-sub(patron, "\\1", o)
#Audio links functions
audio_links <- function(database){
al <- list()
print(length(database))
for (o in 1:length(database)){
link <- database[[o]]$phonetics[[1]]$audio
patron <- ".*/(.*)\\.mp3$"
names(link)<-sub(patron, "\\1", o)
al[[o]] <- link
}
return(al)
}
#Call audio links functions
links_audios <- audio_links(db)
#Audio links functions
audio_links <- function(database){
al <- list()
print(length(database))
for (o in 1:length(database)){
link <- database[[o]]$phonetics[[1]]$audio
al[[o]] <- link
}
return(al)
}
#Call audio links functions
links_audios <- audio_links(db)
View(links_audios)
#Audio links functions
audio_links <- function(database){
al <- list()
for (o in 1:length(database)){
link <- database[[o]]$phonetics[[1]]$audio
al[[o]] <- link
}
return(al)
}
#Call audio links functions
links_audios <- audio_links(db)
names(links_audios) <- t(vocabulary)
View(db)
db[["Widespread"]][["phonetics"]][[1]]
db[["Widespread"]][["phonetics"]][[1]]$audio
db[["Widespread"]][["phonetics"]][[1]]
db$Widespread$phonetics[[1]]$audio
db$Farewell$phonetics[[1]]$audio
source("~/Documents/Vocabulary_scraping/script.R")
source("~/Documents/Vocabulary_scraping/script.R")
source("~/Documents/Vocabulary_scraping/script.R")
source("~/Documents/Vocabulary_scraping/script.R")
source("~/Documents/Vocabulary_scraping/script.R")
#Audio links functions
audio_links <- function(database){
al <- list()
for (o in 1:length(database)){
link <- database[[o]]$phonetics[[1]]$audio
al[[o]]<- link
}
return(al)
}
#Call audio links functions
links_audios <- audio_links(db)
names(links_audios) <- t(vocabulary)
source("~/Documents/Vocabulary_scraping/script.R")
source("~/Documents/Vocabulary_scraping/script.R")
sort(table_doc)
#Table
table_doc <- matrix(c(sort(t(vocabulary)), sort(phonetics), sort(definitions)), ncol=3)
table_doc <- table_doc[order(table_doc[,1]),]
table_doc[,3] <- sapply(table_doc[,3], paste, collapse = ", ")
table_doc <- table_doc[order(table_doc[,1]),]
View(table_doc)
would <- together("would")
would <- scraping("https://api.dictionaryapi.dev/api/v2/entries/en/would")
sound_would <- audio_links(would)
sound_would
download.file(sound_would, "would.mp3")
download.file(sound_would[5], "would.mp3")
download.file(sound_would[5], "would.mp3")
sound_would
sound_would[5]
sound_would[[1]][5]
download.file(sound_would[[1]][5], "would.mp3")
order(table_doc)
sort(table_doc[,1])
sort(table_doc[1,])
table_doc[1]
table_doc[1,]
table_doc[,1]
sort(table_doc[,1])
View(vocabulary)
View(vocabulary)
tryCatch("[Inserte mensaje]")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
View(db)
db$Brainstorm$meanings[[1]]$partOfSpeech
db$Brainstorm$meanings[[1]]$definitions
db$Brainstorm$meanings[[1]]$synonyms
#Synonyms Functions
synonyms_fn <- function(database){
store_sy<- list()
for (x in database){
sy <- x$meanings[[1]]$synonyms
store_sy[[X]] <- sy
}
return(store_sy)
}
#call function
synonyms <- synonyms_fn(db)
#Synonyms Functions
synonyms_fn <- function(database){
store_sy<- list()
for (x in 1:length(database)){
sy <- database[[x]]$meanings[[1]]$synonyms
store_sy[[X]] <- sy
}
return(store_sy)
}
#Synonyms Functions
synonyms_fn <- function(database){
store_sy<- list()
for (x in database){
sy <- x$meanings[[1]]$synonyms
store_sy[[x]] <- sy
}
return(store_sy)
}
#call function
synonyms <- synonyms_fn(db)
for (x in 1:length(database)){
sy <- database[[x]]$meanings[[1]]$synonyms
store_sy[[x]] <- sy
}
#Synonyms Functions
synonyms_fn <- function(database){
store_sy <- list()
for (x in 1:length(database)){
sy <- database[[x]]$meanings[[1]]$synonyms
store_sy[[x]] <- sy
}
return(store_sy)
}
#call function
synonyms <- synonyms_fn(db)
View(synonyms)
synonyms[[1]]
#Audio links functions
audio_links <- function(database){
al <- list()
for (o in 1:length(database)){
link <- database[[o]]$phonetics[[1]]$audio
al[[o]]<- str_c(link)
}
return(al)
}
#Audio links functions
audio_links <- function(database){
al <- list()
for (o in 1:length(database)){
link <- database[[o]]$phonetics[[1]]$audio
al[[o]]<- link
}
return(al)
}
#Synonyms Functions
synonyms_fn <- function(database){
store_sy <- list()
for (x in 1:length(database)){
sy <- database[[x]]$meanings[[1]]$synonyms
store_sy[[x]] <- str_c(sy)
}
return(store_sy)
}
#call function
synonyms <- synonyms_fn(db)
#Packages used in this project
library(stringr)
#Synonyms Functions
synonyms_fn <- function(database){
store_sy <- list()
for (x in 1:length(database)){
sy <- database[[x]]$meanings[[1]]$synonyms
store_sy[[x]] <- str_c(sy)
}
return(store_sy)
}
#call function
synonyms <- synonyms_fn(db)
View(synonyms)
synonyms[[16]]
names(synonyms) <- t(vocabulary)
View(synonyms)
#Synonyms Functions
synonyms_fn <- function(database){
store_sy <- list()
for (x in 1:length(database)){
sy <- database[[x]]$meanings[[1]]$synonyms
if(sy=="character"){
str_c(sy, "***")
store_sy[[x]] <- sy
}
}
return(store_sy)
}
#call function
synonyms <- synonyms_fn(db)
names(synonyms) <- t(vocabulary)
#Synonyms Functions
synonyms_fn <- function(database){
store_sy <- list()
for (x in 1:length(database)){
sy <- database[[x]]$meanings[[1]]$synonyms
store_sy[[x]] <- sy
}
return(store_sy)
}
#call function
synonyms <- synonyms_fn(db)
names(synonyms) <- t(vocabulary)
View(synonyms)
View(synonyms)
#Synonyms Functions
synonyms_fn <- function(database){
store_sy <- vector()
for (x in 1:length(database)){
sy <- database[[x]]$meanings[[1]]$synonyms
store_sy[[x]] <- sy
}
return(store_sy)
}
#call function
synonyms <- synonyms_fn(db)
names(synonyms) <- t(vocabulary)
#call function
synonyms <- synonyms_fn(db)
#Synonyms Functions
synonyms_fn <- function(database){
store_sy <- vector()
for (x in 1:length(database)){
sy <- database[[x]]$meanings[[1]]$synonyms
store_sy[[x]] <- sy
}
return(store_sy)
}
#call function
synonyms <- synonyms_fn(db)
names(synonyms) <- t(vocabulary)
#Synonyms Functions
synonyms_fn <- function(database){
store_sy <-list()
for (x in 1:length(database)){
sy <- database[[x]]$meanings[[1]]$synonyms
store_sy[[x]] <- sy
}
return(store_sy)
}
#call function
synonyms <- synonyms_fn(db)
names(synonyms) <- t(vocabulary)
View(synonyms)
synonyms[["Brainstorm"]][[1]]
class(synonyms)
typeof(synonyms)
typeof(synonyms$Brainstorm)
typeof(synonyms$Brainstorm[[1]])
typeof(synonyms$Brainstorm[[2]])
str(synonyms$Brainstorm)
#Synonyms Functions
synonyms_fn <- function(database){
store_sy <-list()
for (x in 1:length(database)){
sy <- database[[x]]$meanings[[1]]$synonyms
store_sy[[x]] <- unlist(sy)
}
return(store_sy)
}
#call function
synonyms <- synonyms_fn(db)
names(synonyms) <- t(vocabulary)
View(synonyms)
View(vocabulary)
synonyms[[112]]
#Audio links functions
audio_links <- function(database){
al <- list()
for (o in 1:length(database)+1){
link <- database[[o]]$phonetics[[1]]$audio
al[[o]]<- link
}
return(al)
}
#Call audio links functions
links_audios <- audio_links(db)
names(links_audios) <- t(vocabulary)
synonyms_fn <- function(database) {
store_sy <- list()
for (x in 1:length(database)) {
if (length(database[[x]]$meanings) > 0) {
sy <- database[[x]]$meanings[[1]]$synonyms
store_sy[[x]] <- unlist(sy)
} else {
store_sy[[x]] <- NULL
}
}
return(store_sy)
}
#call function
synonyms <- synonyms_fn(db)
names(synonyms) <- t(vocabulary)
synonyms_fn <- function(database) {
store_sy <- list()
for (x in 1:length(database)) {
if (length(database[[x]]$meanings) > 0) {
sy <- database[[x]]$meanings[[1]]$synonyms
store_sy[[x]] <- unlist(sy)
} else {
store_sy[[x]] <- NULL
}
}
return(na.omit(store_sy))
}
synonyms <- synonyms_fn(db)
names(synonyms) <- vocabulary
View(synonyms)
names(synonyms) <- t(vocabulary)
# #Synonyms Functions
synonyms_fn <- function(database){
store_sy <-list()
for (x in 1:(length(database)+1)){
sy <- database[[x]]$meanings[[1]]$synonyms
store_sy[[x]] <- unlist(sy)
}
return(store_sy)
}
#call function
synonyms <- synonyms_fn(db)
names(synonyms) <- t(vocabulary)
#Synonyms Functions
synonyms_fn <- function(database){
store_sy <-list()
for (x in 1:length(database)){
sy <- database[[x]]$meanings[[1]]$synonyms
store_sy[[x]] <- unlist(sy)
}
return(store_sy)
}
#call function
synonyms <- synonyms_fn(db)
names(synonyms) <- t(vocabulary)
sessionInfo()
#Synonyms Functions
synonyms_fn <- function(database){
store_sy <-list()
for (x in 1:length(database)){
sy <- database[[x]]$meanings[[1]]$synonyms
store_sy[[x]] <- (sy)
}
return(store_sy)
}
#call function
synonyms <- synonyms_fn(db)
names(synonyms) <- t(vocabulary)
View(synonyms)
synonyms[["Pace"]][[1]]
synonyms[["Pace"]][[2]]
synonyms[["Pace"]][[3]]
synonyms_fn <- function(database){
store_sy <-list()
for (x in 1:length(database)){
sy <- database[[x]]$meanings[[1]]$synonyms
if (length(sy) > 0) {
store_sy[[x]] <- unlist(sy)
} else {
store_sy[[x]] <- sy
}
}
return(store_sy)
}
#call function
synonyms <- synonyms_fn(db)
names(synonyms) <- t(vocabulary)
View(synonyms)
#Synonyms Functions
synonyms_fn <- function(database){
store_sy <-list()
for (x in 1:length(database)){
sy <- database[[x]]$meanings[[1]]$synonyms
store_sy[[x]] <- sy
}
return(store_sy)
}
#call function
synonyms <- unlist(synonyms_fn(db))
names(synonyms) <- t(vocabulary)
View(synonyms)
#Synonyms Functions
synonyms_fn <- function(database){
store_sy <-list()
for (x in 1:length(database)){
sy <- unlist(database[[x]]$meanings[[1]]$synonyms)
store_sy[[x]] <- sy
}
return(store_sy)
}
#call function
synonyms <- synonyms_fn(db)
names(synonyms) <- t(vocabulary)
View(synonyms)
#Synonyms Functions
synonyms_fn <- function(database){
store_sy <-list()
for (x in 1:length(database)){
sy <- unlist(database[[x]]$meanings[[1]]$synonyms)
if(is.null(sy)){
sy <- "not found"
}
store_sy[[x]] <- sy
}
return(store_sy)
}
#call function
synonyms <- synonyms_fn(db)
names(synonyms) <- t(vocabulary)
View(synonyms)
#Synonyms Functions
synonyms_fn <- function(database){
store_sy <-list()
for (x in 1:length(database)){
sy <- unlist(database[[x]]$meanings[[1]]$synonyms)
if(is.null(sy)){
sy <- "φ"
}
store_sy[[x]] <- sy
}
return(store_sy)
}
#call function
synonyms <- synonyms_fn(db)
names(synonyms) <- t(vocabulary)
View(synonyms)
extable<-matrix(c(vocabulary, synonyms), ncol = 2)
View(extable)
extable<-matrix(c(t(vocabulary), synonyms), ncol = 2)
export(extable, "ejemplo.xlsx")
export(extable, "ejemplo.cvs")
export(extable, "ejemplo.csv")
library(rio)
export(extable, "ejemplo.csv")
export(extable, "ejemplo.xlsx")
#phonetic function
phonetic_fn <- function(database){
store_ph <- list()
for(m in 1:length(database)){
ph <- database[[m]]$phonetic
if(typeof(ph)=="character"){
store_ph[[m]]<-ph
}
else if(typeof(ph)=="list"){
#ph <- database[[m]]$phonetics[[1]]$text
ph <- "φ"
store_ph[[m]]<-ph
}
}
return(store_ph)
}
#Call phonetic function
phonetics <- phonetic_fn(db)
names(phonetics) <- t(vocabulary)
View(phonetics)
#Synonyms Functions
synonyms_fn <- function(database){
store_sy <-list()
for (x in 1:length(database)){
sy <- unlist(database[[x]]$meanings[[1]]$synonyms)
if(is.null(sy)){
sy <- "φ"
}
store_sy[[x]] <- sy
}
return(store_sy)
}
#call synonym function
synonyms <- synonyms_fn(db)
name(synonyms) <- t(vocabulary)
names(synonyms) <- t(vocabulary)
source("~/Documents/Vocabulary_scraping/script.R")
source("~/Documents/Vocabulary_scraping/script.R")
View(table_doc)
