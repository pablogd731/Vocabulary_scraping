*++++++++-
exit
clc
clear
install.packages(httr)
install.packages("httr")
library(rio)
install_formats()
library(rio)
#main directory
setwd("home//pablogd731//Documents//Vocabulary_scraping")
#main directory
setwd("/home/pablogd731/Documents/Vocabulary_scraping")
#use a personal vocabulary learned
vocabulary <- import("words", "txt")
View(vocabulary)
#use a personal vocabulary learned
vocabulary <- import("words", "txt", header = F)
View(vocabulary)
#use a personal vocabulary learned
vocabulary <- import("words", "txt", header = F, main = "words")
#concat each word with direction api
together <- function(file, web_api){
bill <- list()
for(j in file){
link <- str_c(web_api,tolower(j))
bill[[j]] <- link
}
return(bill)
}
#Call function together
links <- together(vocabulary, web)
for(n in vocabulary){n}
for(n in vocabulary){pritn(n)}
for(n in vocabulary){print(n)}
for(n in vocabulary){print(toLower(n))}
for(n in vocabulary){print(tolower(n))}
for(n in vocabulary){print(str_c(tolower(n), "nn")}
for(n in vocabulary){print(str_c(tolower(n),"nn"))}
print(str_c(tolower(n),"nn"))
print(c(tolower(n),"n"))
for(j in 1:length(file)){
link <- str_c(web_api,tolower(j))
bill[[j]] <- link
}
bill <- list()
for(j in 1:length(file)){
link <- str_c(web_api,tolower(j))
bill[[j]] <- link
}
#Packages used in this project
library(stringr)
for(j in 1:length(file)){
link <- str_c(web_api,tolower(j))
bill[[j]] <- link
}
length(vocabulary)
for(j in 1:nrow(file)){
link <- str_c(web_api,tolower(j))
bill[[j]] <- link
}
nrow(vocabulary)
#concat each word with direction api
together <- function(file, web_api){
bill <- list()
for(j in 1:nrow(file)){
link <- str_c(web_api,tolower(j))
bill[[j]] <- link
}
return(bill)
}
#Call function together
links <- together(vocabulary, web)
#Structure of API
web <- "https://api.dictionaryapi.dev/api/v2/entries/en/"
#Call function together
links <- together(vocabulary, web)
View(links)
#use a personal vocabulary learned
vocabulary <- as.vector(import("words", "txt", header = F))
View(vocabulary)
vocabulary[2]
vocabulary[,2]
vocabulary[2,]
#concat each word with direction api
together <- function(file, web_api){
bill <- list()
for(j in 1:nrow(file)){
link <- str_c(web_api,tolower(file[j,]))
bill[[j]] <- link
}
return(bill)
}
#Call function together
links <- together(vocabulary, web)
View(links)
bill <- vector()
#concat each word with direction api
together <- function(file, web_api){
bill <- vector()
for(j in 1:nrow(file)){
link <- str_c(web_api,tolower(file[j,]))
bill[[j]] <- link
}
return(bill)
}
#Call function together
links <- together(vocabulary, web)
links
#concat each word with direction api
together <- function(file, web_api){
bill <- list()
for(j in 1:nrow(file)){
link <- str_c(web_api,tolower(file[j,]))
bill[[j]] <- link
}
return(bill)
}
#Call function together
links <- together(vocabulary, web)
names(links) <- vocabulary
View(links)
names(links) <- vocabulary[:,]
names(links) <- vocabulary[1,]
names(links) <- t(vocabulary)
View(links)
#Calling to scrape function
db <- scraping(links)
source("~/Documents/Vocabulary_scraping/script.R")
source("~/Documents/Vocabulary_scraping/script.R")
source("~/Documents/Vocabulary_scraping/script.R")
source("~/Documents/Vocabulary_scraping/script.R")
View(db)
db[["https://api.dictionaryapi.dev/api/v2/entries/en/brainstorm"]]
names(db) <- t(vocabulary)
View(db)
db[["Brainstorm"]]
db$Brainstorm$phonetic
#concat each word with direction api
together <- function(file, web_api){
bill <- list()
for(j in 1:nrow(file)){
link <- str_c(web_api,tolower(file[j,]))
bill[[j]] <- link
}
return(bill)
}
#Call function together
links <- together(vocabulary, web)
#easy example
direction <- c(web, word_exemple)
direction
#easy example
direction <- str_c(web, word_exemple)
direction
View(vocabulary)
View(vocabulary)
View(links)
names(links) <- t(vocabulary)
View(links)
db$Notwithstanding
db$Notwithstanding$phonetics
db$Notwithstanding$phonetic
db$Notwithstanding$phonetics["text"]
db$Notwithstanding$phonetics
db$Brainstorm$phonetics
db$Brainstorm$phonetics["text"]
View(db)
db$Brainstorm$phonetic
db[[1]]$phonetic
#phonetic function
phonetic_fn <- function(){
store_ph <- list()
for(m in 1:length(database)){
ph <- database[[m]]$phonetic
store_ph[[m]]<-ph
}
return(store_ph)
}
#phonetic function
phonetic_fn <- function(database){
store_ph <- list()
for(m in 1:length(database)){
ph <- database[[m]]$phonetic
store_ph[[m]]<-ph
}
return(store_ph)
}
#Call phonetic function
phonetics <- phonetics(db)
#Call phonetic function
phonetics <- phonetic_fn(db)
View(phonetics)
phonetics[[18]]
phonetics[[43]]
phonetics[[50]]
names(phonetics) <- t(vocabulary)
phonetics[["Tower"]]
ex <- as.vector(phonetics)
print(ex)
class(phonetics)
phonetics[1]
class(phonetics[1])
class(phonetics[2])
class(phonetics[3])
class(phonetics[4])
typeof(phonetics)
typeof(phonetics[1])
View(ex)
View(ex)
ex <- as.matrix(phonetics)
db$Quarter$phonetic
db$Notwithstanding$phonetic
db$Notwithstanding["text"]
db$Notwithstanding$word
db$Notwithstanding$phonetics
db$Notwithstanding$phonetic
db$Notwithstanding$phonetic
class(db$Notwithstanding$phonetic)
typeof(db$Notwithstanding$phonetic)
phonetics[["Notwithstanding"]][[1]][["text"]]
phonetics[["Brainstorm"]][[1]][["text"]]
db$Notwithstanding[[1]][["text"]]
db$Notwithstanding$[[1]]$[["text"]]
db$Notwithstanding$[[1]]
db$Notwithstanding$sourceUrls
length(phonetics)
length(phonetics$Brainstorm$phonetic)
length(db$Brainstorm$phonetic)
length(db$Notwithstanding$phonetic)
is.null(db$Brainstorm$phonetic)
is.null(db$Notwithstanding$phonetic)
phonetics[["Raw"]]
phonetics[["Toss"]]
phonetics[["Toss"]]
phonetics[["Raw"]]
phonetics[["Toss"]]
length(phonetics[["Toss"]])
phonetics[["Toss"]]
length(phonetics[["Toss"]])
phonetics[["Migrate"]]
phonetics[["Toss"]][[1]]
length(phonetics[["Toss"]][4,])
length(phonetics[["Toss"]])
str(phonetics[["Toss"]])
str(phonetics[["Toss"]]$text)
str(phonetics$Toss$text
dfa
}
phonetics$Toss$text
phonetics$Toss
phonetics$Brainstorm$phonetic
db$Brainstorm$phonetic
str(db$Brainstorm$phonetic)
typeof(db$Brainstorm$phonetic)
typeof(db$Notwithstanding$phonetic)
is(typeof(db$Notwithstanding$phonetic), list)
is(typeof(db$Notwithstanding$phonetic), list())
typeof(db$Notwithstanding$phonetic)==list
typeof(db$Notwithstanding$phonetic)=="list"
typeof(db$Brainstorm$phonetic)
(db$Brainstorm$phonetic)=)"character"
(db$Brainstorm$phonetic)=="character"
typeof(db$Brainstorm$phonetic)=="character"
#phonetic function
phonetic_fn <- function(database){
store_ph <- list()
for(m in 1:length(database)){
ph <- database[[m]]$phonetic
if(typeof(ph)=="character"){
store_ph[[m]]<-ph
}
}
return(store_ph)
}
#Call phonetic function
phonetics <- phonetic_fn(db)
names(phonetics) <- t(vocabulary)
db$Notwithstanding[["text"]]
db$Notwithstanding$phonetics["text"]
db$Notwithstanding$phonetics$license
db$Notwithstanding$phonetics[[1]]
db$Notwithstanding$phonetics[[1]]$text
db$Notwithstanding$phonetics[[1]]["text"]
#phonetic function
phonetic_fn <- function(database){
store_ph <- list()
for(m in 1:length(database)){
ph <- database[[m]]$phonetic
if(typeof(ph)=="character"){
store_ph[[m]]<-ph
}
else if(typeof(ph)=="list"){
ph <- database[[m]]$phonetics[[1]]$text
store_ph[[m]]<-ph
}
}
return(store_ph)
}
#Call phonetic function
phonetics <- phonetic_fn(db)
names(phonetics) <- t(vocabulary)
View(phonetics)
phonetics[["Widespread"]]
phonetics$Widespread
db$Widespread
db[["Widespread"]][["phonetics"]][[1]]
db[["Widespread"]][["meanings"]][[1]][["definitions"]][[1]][["definition"]]
source("~/Documents/Vocabulary_scraping/script.R")
install_formats()
source("~/Documents/Vocabulary_scraping/script.R")
View(phonetics)
#Table
table_doc <- matrix(t(vocabulary), phonetics)
t(vocabulary)
phonetics
#Table
table_doc <- matrix(t(vocabulary), as.vector(phonetics))
#Table
table_doc <- matrix(t(vocabulary), as.matrix(phonetics))
length(t(vocabulary))
length(phonetics)
#Table
table_doc <- matrix(t(vocabulary), phonetics), ncol=2)
#Table
table_doc <- matrix(c(t(vocabulary), phonetics)), ncol=2)
#Table
table_doc <- matrix(c(t(vocabulary), phonetics), ncol=2)
View(table_doc)
export(table_doc, "tabla.xlsx")
srt(table_doc[1,1])
srt(db)
str(db)
str(table_doc)
str(table_doc)
str(table_doc[1,1])
str(table_doc[1,2])
str(table_doc[12,2])
length(table_doc[12,2])
length(table_doc[12,2][1])
length(table_doc[12,2][2])
length(table_doc[12,2][3])
length(table_doc[12,2][[1]])
table_doc[12,2][[1]]
table_doc[12,2
]
table_doc[12,2][[1]]
paste(table_doc[12,2], collapse = " ")
ex <- paste(table_doc[12,2], collapse = " ")
ex
source("~/Documents/Vocabulary_scraping/script.R")
View(vocabulary)
sort(vocabulary, decreasing = F)
vocabulary_ordenado <- sort(vocabulary, decreasing = FALSE)
#use a personal vocabulary learned
vocabulary <- as.data.frame(import("words", "txt", header = F))
vocabulary <- sort(vocabulary, decreasing = F)
vocabulary <- sort(t(vocabulary), decreasing = F)
#use a personal vocabulary learned
vocabulary <- as.vector(import("words", "txt", header = F))
vocabulary <- sort(t(vocabulary), decreasing = F)
vocabulary
vocabulary[3]
vocabulary[4]
source("~/Documents/Vocabulary_scraping/script.R")
vocabulary <- sort(as.vector(t(vocabulary)),decreasing = F)
vocabulary <- as.vector(sort(t(vocabulary),decreasing = F))
#use a personal vocabulary learned
vocabulary <- as.vector(import("words", "txt", header = F))
vocabulary <- import(sort("words", "txt"), header=F)
vocabulary <- as.vector(sort(vocabulary),decreasing = F))
vocabulary <- as.vector(sort(vocabulary,decreasing = F))
as.data.frame(vocabulary)
vocabulary <- as.vector(sort(as.data.frame(vocabulary),decreasing = F))
source("~/Documents/Vocabulary_scraping/script.R")
source("~/Documents/Vocabulary_scraping/script.R")
#phonetic function
phonetic_fn <- function(database){
store_ph <- list()
for(m in 1:length(database)){
ph <- database[[m]]$phonetic
if(typeof(ph)=="character"){
store_ph[[m]]<-ph
}
else if(typeof(ph)=="list"){
#ph <- database[[m]]$phonetics[[1]]$text
ph <- "Not found"
store_ph[[m]]<-ph
}
}
return(store_ph)
}
#Call phonetic function
phonetics <- phonetic_fn(db)
names(phonetics) <- t(vocabulary)
View(phonetics)
source("~/Documents/Vocabulary_scraping/script.R")
